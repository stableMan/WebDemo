<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
">
    <!-- 0.上面的那些头可以官网下载 -->

    <!-- 配置spring -->
    <!-- 1:开启SpringMVC注解模式 -->
    <!-- 简化配置：
        （1）自动注册DefaultAnnotationHandlerMapping，AnnotationMethodHandlerAdapter
        （2）提供一系列：数据绑定，数字和日期的format @NumberFormat，@DataTimeFormat，xml，json默认读写支持
    -->
    <mvc:annotation-driven/>
    <!-- 2：servlet-mapping 映射路径："/" -->
    <!-- 静态资源默认servlet配置
        1.加入对静态资源的处理
        2.欲需使用"/"做整体映射
     -->
    <mvc:default-servlet-handler/>
    <!-- 3：配置多个ViewResolver视图解析 -->
    <!-- 3.1 配置velocity的配置信息 -->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <!-- 这里的路径回合下面layoutUrl和prefix中的路径组合 -->
        <property name="resourceLoaderPath" value="/"/>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
                <prop key="contentType">text/html;charset=UTF-8</prop>
            </props>
        </property>
    </bean>
    <!-- 3.2 配置多个视图解析 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="viewResolvers">
            <list>
                <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
                    <property name="cache" value="true"/>
                    <!-- velocity的order要小于jsp的,velocity和html的order优先级大小无所谓，都能正常解析并显示 -->
                    <property name="order" value="2"/>
                    <property name="suffix" value=".vm"/>
                    <!-- 这里的路径会加上resourceLoaderPath的路径 -->
                    <property name="layoutUrl" value="/WEB-INF/velocity/layout/default.vm"/>
                    <property name="prefix" value="/WEB-INF/velocity/"/>
                    <property name="contentType" value="text/html;charset=UTF-8"/>
                </bean>

                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                    <!-- 注意：JSP的优先级要最低，即order要大，否则，HTML和velocity的页面会被解析到*.jsp -->
                    <property name="order" value="3" />
                </bean>

                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass" value="org.knight.common.HtmlResourceView"/>
                    <property name="prefix" value="/WEB-INF/html/"/>
                    <property name="suffix" value=".html"/>
                    <!-- 注意：自定义的HTML一定要比JSF的优先级高，即order要小，否则，HTML的页面会被解析成jsp -->
                    <property name="order" value="1" />
                </bean>
            </list>
        </property>
    </bean>

    <!-- 4：扫描web相关的bean -->
    <context:component-scan base-package="org.knight.*"/>

    <!-- 5.静态文件不拦截 -->
    <!--<mvc:resources mapping="/static/*" location="/static/*"/>-->
</beans>